/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart implements IStatemachine {
	public static class Test {
		private boolean startTest;
		
		public boolean getStartTest() {
			return startTest;
		}
		
		public void setStartTest(boolean value) {
			this.startTest = value;
		}
		
		private boolean choiceRight;
		
		public boolean getChoiceRight() {
			return choiceRight;
		}
		
		public void setChoiceRight(boolean value) {
			this.choiceRight = value;
		}
		
		private boolean choiceUser;
		
		public boolean getChoiceUser() {
			return choiceUser;
		}
		
		public void setChoiceUser(boolean value) {
			this.choiceUser = value;
		}
		
		private String fineCert;
		
		public String getFineCert() {
			return fineCert;
		}
		
		public void setFineCert(String value) {
			this.fineCert = value;
		}
		
		private String status;
		
		public String getStatus() {
			return status;
		}
		
		public void setStatus(String value) {
			this.status = value;
		}
		
	}
	
	public static class Param {
		private boolean maxDepth;
		
		public boolean getMaxDepth() {
			return maxDepth;
		}
		
		public void setMaxDepth(boolean value) {
			this.maxDepth = value;
		}
		
		private long chance;
		
		public long getChance() {
			return chance;
		}
		
		public void setChance(long value) {
			this.chance = value;
		}
		
		private long rightLim;
		
		public long getRightLim() {
			return rightLim;
		}
		
		public void setRightLim(long value) {
			this.rightLim = value;
		}
		
		private long leftLim;
		
		public long getLeftLim() {
			return leftLim;
		}
		
		public void setLeftLim(long value) {
			this.leftLim = value;
		}
		
		private long currDepth;
		
		public long getCurrDepth() {
			return currDepth;
		}
		
		public void setCurrDepth(long value) {
			this.currDepth = value;
		}
		
		private double value;
		
		public double getValue() {
			return value;
		}
		
		public void setValue(double value) {
			this.value = value;
		}
		
	}
	
	protected Test test;
	
	protected Param param;
	
	public enum State {
		CODE_RESET,
		CODE_STARTED,
		CODE_CHOICEUSER,
		CODE_CONTROLRISPOSTA,
		CODE_RIGHTCH,
		CODE_WRONGCH,
		CODE_CHANGECURRDEPTH,
		CODE_CONTROLRISP,
		CODE_CHANGEPOS,
		CODE__FINAL_,
		CODE_INITIALIZE,
		CODE_VALMIN,
		CODE_VALMAX,
		CODE_FINECERT,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Statechart() {
		test = new Test();
		param = new Param();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		test.setStartTest(false);
		
		test.setChoiceRight(false);
		
		test.setChoiceUser(false);
		
		test.setFineCert("");
		
		test.setStatus("");
		
		param.setMaxDepth(false);
		
		param.setChance(0);
		
		param.setRightLim(0);
		
		param.setLeftLim(0);
		
		param.setCurrDepth(0);
		
		param.setValue(0.0);
		
		isExecuting = false;
	}
	
	public void enter() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_Code_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_Code();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return (stateVector[0] == State.CODE__FINAL_);
	}
	private void clearInEvents() {
		rispo_e = false;
		start_e = false;
		init_e = false;
		started_e = false;
		choosed_e = false;
		control_e = false;
		checkR_e = false;
		goToRestart_e = false;
		changedCurr_e = false;
		controlRisp_e = false;
		fine_e = false;
		changePos_e = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case CODE_RESET:
			code_reset_react(-1);
			break;
		case CODE_STARTED:
			code_started_react(-1);
			break;
		case CODE_CHOICEUSER:
			code_choiceUser_react(-1);
			break;
		case CODE_CONTROLRISPOSTA:
			code_controlRisposta_react(-1);
			break;
		case CODE_RIGHTCH:
			code_rightCh_react(-1);
			break;
		case CODE_WRONGCH:
			code_wrongCh_react(-1);
			break;
		case CODE_CHANGECURRDEPTH:
			code_changeCurrDepth_react(-1);
			break;
		case CODE_CONTROLRISP:
			code_controlRisp_react(-1);
			break;
		case CODE_CHANGEPOS:
			code_changePos_react(-1);
			break;
		case CODE__FINAL_:
			code__final__react(-1);
			break;
		case CODE_INITIALIZE:
			code_initialize_react(-1);
			break;
		case CODE_VALMIN:
			code_valMin_react(-1);
			break;
		case CODE_VALMAX:
			code_valMax_react(-1);
			break;
		case CODE_FINECERT:
			code_fineCert_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((((((rispo_e || start_e) || init_e) || started_e) || choosed_e) || control_e) || checkR_e) || goToRestart_e) || changedCurr_e) || controlRisp_e) || fine_e) || changePos_e));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case CODE_RESET:
			return stateVector[0] == State.CODE_RESET;
		case CODE_STARTED:
			return stateVector[0] == State.CODE_STARTED;
		case CODE_CHOICEUSER:
			return stateVector[0] == State.CODE_CHOICEUSER;
		case CODE_CONTROLRISPOSTA:
			return stateVector[0] == State.CODE_CONTROLRISPOSTA;
		case CODE_RIGHTCH:
			return stateVector[0] == State.CODE_RIGHTCH;
		case CODE_WRONGCH:
			return stateVector[0] == State.CODE_WRONGCH;
		case CODE_CHANGECURRDEPTH:
			return stateVector[0] == State.CODE_CHANGECURRDEPTH;
		case CODE_CONTROLRISP:
			return stateVector[0] == State.CODE_CONTROLRISP;
		case CODE_CHANGEPOS:
			return stateVector[0] == State.CODE_CHANGEPOS;
		case CODE__FINAL_:
			return stateVector[0] == State.CODE__FINAL_;
		case CODE_INITIALIZE:
			return stateVector[0] == State.CODE_INITIALIZE;
		case CODE_VALMIN:
			return stateVector[0] == State.CODE_VALMIN;
		case CODE_VALMAX:
			return stateVector[0] == State.CODE_VALMAX;
		case CODE_FINECERT:
			return stateVector[0] == State.CODE_FINECERT;
		default:
			return false;
		}
	}
	
	public Test test() {
		return test;
	}
	
	public Param param() {
		return param;
	}
	
	
	private boolean rispo_e;
	
	
	public void raiseRispo_e() {
		inEventQueue.add(() -> {
			rispo_e = true;
		});
		runCycle();
	}
	
	private boolean start_e;
	
	
	public void raiseStart_e() {
		inEventQueue.add(() -> {
			start_e = true;
		});
		runCycle();
	}
	
	private boolean init_e;
	
	
	public void raiseInit_e() {
		inEventQueue.add(() -> {
			init_e = true;
		});
		runCycle();
	}
	
	private boolean started_e;
	
	
	public void raiseStarted_e() {
		inEventQueue.add(() -> {
			started_e = true;
		});
		runCycle();
	}
	
	private boolean choosed_e;
	
	
	public void raiseChoosed_e() {
		inEventQueue.add(() -> {
			choosed_e = true;
		});
		runCycle();
	}
	
	private boolean control_e;
	
	
	public void raiseControl_e() {
		inEventQueue.add(() -> {
			control_e = true;
		});
		runCycle();
	}
	
	private boolean checkR_e;
	
	
	public void raiseCheckR_e() {
		inEventQueue.add(() -> {
			checkR_e = true;
		});
		runCycle();
	}
	
	private boolean goToRestart_e;
	
	
	public void raiseGoToRestart_e() {
		inEventQueue.add(() -> {
			goToRestart_e = true;
		});
		runCycle();
	}
	
	private boolean changedCurr_e;
	
	
	public void raiseChangedCurr_e() {
		inEventQueue.add(() -> {
			changedCurr_e = true;
		});
		runCycle();
	}
	
	private boolean controlRisp_e;
	
	
	public void raiseControlRisp_e() {
		inEventQueue.add(() -> {
			controlRisp_e = true;
		});
		runCycle();
	}
	
	private boolean fine_e;
	
	
	public void raiseFine_e() {
		inEventQueue.add(() -> {
			fine_e = true;
		});
		runCycle();
	}
	
	private boolean changePos_e;
	
	
	public void raiseChangePos_e() {
		inEventQueue.add(() -> {
			changePos_e = true;
		});
		runCycle();
	}
	
	/* Entry action for state 'reset'. */
	private void entryAction_Code_reset() {
		test.setChoiceRight(false);
		
		test.setChoiceUser(true);
		
		test.setStatus("non_init");
		
		param.setMaxDepth(true);
		
		param.setChance(1);
		
		param.setRightLim(0);
		
		param.setLeftLim(0);
	}
	
	/* Entry action for state 'started'. */
	private void entryAction_Code_started() {
		test.setStatus("started");
		
		param.setCurrDepth(param.leftLim);
	}
	
	/* Entry action for state 'rightCh'. */
	private void entryAction_Code_rightCh() {
		param.setLeftLim(param.currDepth);
	}
	
	/* Entry action for state 'wrongCh'. */
	private void entryAction_Code_wrongCh() {
		param.setRightLim(param.currDepth);
	}
	
	/* Entry action for state 'changeCurrDepth'. */
	private void entryAction_Code_changeCurrDepth() {
		param.setValue((((param.leftLim + param.rightLim)) / 2));
		
		param.setMaxDepth(false);
		
		raiseChangedCurr_e();
	}
	
	/* Entry action for state 'changePos'. */
	private void entryAction_Code_changePos() {
		param.setChance(0);
		
		raiseChangePos_e();
	}
	
	/* Entry action for state 'initialize'. */
	private void entryAction_Code_initialize() {
		test.setStartTest(true);
		
		test.setChoiceRight(false);
		
		test.setChoiceUser(true);
		
		test.setFineCert("continua");
		
		test.setStatus("non_init");
		
		param.setMaxDepth(true);
		
		param.setChance(1);
		
		param.setRightLim(0);
		
		param.setLeftLim(0);
	}
	
	/* Entry action for state 'valMin'. */
	private void entryAction_Code_valMin() {
		param.setCurrDepth(((long) param.value));
	}
	
	/* Entry action for state 'valMax'. */
	private void entryAction_Code_valMax() {
		param.setCurrDepth(((long) ((param.value + 1))));
	}
	
	/* Entry action for state 'fineCert'. */
	private void entryAction_Code_fineCert() {
		test.setFineCert("fine_cert");
	}
	
	/* Exit action for state 'started'. */
	private void exitAction_Code_started() {
		raiseStarted_e();
	}
	
	/* Exit action for state 'choiceUser'. */
	private void exitAction_Code_choiceUser() {
		test.setStatus("choosed");
	}
	
	/* Exit action for state 'controlRisposta'. */
	private void exitAction_Code_controlRisposta() {
		raiseControl_e();
	}
	
	/* Exit action for state 'controlRisp'. */
	private void exitAction_Code_controlRisp() {
		raiseControlRisp_e();
	}
	
	/* Exit action for state 'fineCert'. */
	private void exitAction_Code_fineCert() {
		test.setStartTest(false);
		
		raiseGoToRestart_e();
	}
	
	/* 'default' enter sequence for state reset */
	private void enterSequence_Code_reset_default() {
		entryAction_Code_reset();
		stateVector[0] = State.CODE_RESET;
	}
	
	/* 'default' enter sequence for state started */
	private void enterSequence_Code_started_default() {
		entryAction_Code_started();
		stateVector[0] = State.CODE_STARTED;
	}
	
	/* 'default' enter sequence for state choiceUser */
	private void enterSequence_Code_choiceUser_default() {
		stateVector[0] = State.CODE_CHOICEUSER;
	}
	
	/* 'default' enter sequence for state controlRisposta */
	private void enterSequence_Code_controlRisposta_default() {
		stateVector[0] = State.CODE_CONTROLRISPOSTA;
	}
	
	/* 'default' enter sequence for state rightCh */
	private void enterSequence_Code_rightCh_default() {
		entryAction_Code_rightCh();
		stateVector[0] = State.CODE_RIGHTCH;
	}
	
	/* 'default' enter sequence for state wrongCh */
	private void enterSequence_Code_wrongCh_default() {
		entryAction_Code_wrongCh();
		stateVector[0] = State.CODE_WRONGCH;
	}
	
	/* 'default' enter sequence for state changeCurrDepth */
	private void enterSequence_Code_changeCurrDepth_default() {
		entryAction_Code_changeCurrDepth();
		stateVector[0] = State.CODE_CHANGECURRDEPTH;
	}
	
	/* 'default' enter sequence for state controlRisp */
	private void enterSequence_Code_controlRisp_default() {
		stateVector[0] = State.CODE_CONTROLRISP;
	}
	
	/* 'default' enter sequence for state changePos */
	private void enterSequence_Code_changePos_default() {
		entryAction_Code_changePos();
		stateVector[0] = State.CODE_CHANGEPOS;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_Code__final__default() {
		stateVector[0] = State.CODE__FINAL_;
	}
	
	/* 'default' enter sequence for state initialize */
	private void enterSequence_Code_initialize_default() {
		entryAction_Code_initialize();
		stateVector[0] = State.CODE_INITIALIZE;
	}
	
	/* 'default' enter sequence for state valMin */
	private void enterSequence_Code_valMin_default() {
		entryAction_Code_valMin();
		stateVector[0] = State.CODE_VALMIN;
	}
	
	/* 'default' enter sequence for state valMax */
	private void enterSequence_Code_valMax_default() {
		entryAction_Code_valMax();
		stateVector[0] = State.CODE_VALMAX;
	}
	
	/* 'default' enter sequence for state fineCert */
	private void enterSequence_Code_fineCert_default() {
		entryAction_Code_fineCert();
		stateVector[0] = State.CODE_FINECERT;
	}
	
	/* 'default' enter sequence for region Code */
	private void enterSequence_Code_default() {
		react_Code__entry_Default();
	}
	
	/* Default exit sequence for state reset */
	private void exitSequence_Code_reset() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state started */
	private void exitSequence_Code_started() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Code_started();
	}
	
	/* Default exit sequence for state choiceUser */
	private void exitSequence_Code_choiceUser() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Code_choiceUser();
	}
	
	/* Default exit sequence for state controlRisposta */
	private void exitSequence_Code_controlRisposta() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Code_controlRisposta();
	}
	
	/* Default exit sequence for state rightCh */
	private void exitSequence_Code_rightCh() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state wrongCh */
	private void exitSequence_Code_wrongCh() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state changeCurrDepth */
	private void exitSequence_Code_changeCurrDepth() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state controlRisp */
	private void exitSequence_Code_controlRisp() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Code_controlRisp();
	}
	
	/* Default exit sequence for state changePos */
	private void exitSequence_Code_changePos() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_Code__final_() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state initialize */
	private void exitSequence_Code_initialize() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state valMin */
	private void exitSequence_Code_valMin() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state valMax */
	private void exitSequence_Code_valMax() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state fineCert */
	private void exitSequence_Code_fineCert() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_Code_fineCert();
	}
	
	/* Default exit sequence for region Code */
	private void exitSequence_Code() {
		switch (stateVector[0]) {
		case CODE_RESET:
			exitSequence_Code_reset();
			break;
		case CODE_STARTED:
			exitSequence_Code_started();
			break;
		case CODE_CHOICEUSER:
			exitSequence_Code_choiceUser();
			break;
		case CODE_CONTROLRISPOSTA:
			exitSequence_Code_controlRisposta();
			break;
		case CODE_RIGHTCH:
			exitSequence_Code_rightCh();
			break;
		case CODE_WRONGCH:
			exitSequence_Code_wrongCh();
			break;
		case CODE_CHANGECURRDEPTH:
			exitSequence_Code_changeCurrDepth();
			break;
		case CODE_CONTROLRISP:
			exitSequence_Code_controlRisp();
			break;
		case CODE_CHANGEPOS:
			exitSequence_Code_changePos();
			break;
		case CODE__FINAL_:
			exitSequence_Code__final_();
			break;
		case CODE_INITIALIZE:
			exitSequence_Code_initialize();
			break;
		case CODE_VALMIN:
			exitSequence_Code_valMin();
			break;
		case CODE_VALMAX:
			exitSequence_Code_valMax();
			break;
		case CODE_FINECERT:
			exitSequence_Code_fineCert();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Code__entry_Default() {
		enterSequence_Code_initialize_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long code_reset_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (fine_e) {
				exitSequence_Code_reset();
				enterSequence_Code__final__default();
				transitioned_after = 0;
			} else {
				if (start_e) {
					exitSequence_Code_reset();
					enterSequence_Code_started_default();
					react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_started_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if ((test.getStatus()== null?"started" ==null :test.getStatus().equals("started"))) {
				exitSequence_Code_started();
				enterSequence_Code_choiceUser_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_choiceUser_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (choosed_e) {
				exitSequence_Code_choiceUser();
				enterSequence_Code_controlRisposta_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_controlRisposta_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (test.getChoiceUser()==test.getChoiceRight()) {
				exitSequence_Code_controlRisposta();
				enterSequence_Code_rightCh_default();
				react(0);
				
				transitioned_after = 0;
			} else {
				if ((test.getChoiceRight()!=test.getChoiceUser() && !param.getMaxDepth())) {
					exitSequence_Code_controlRisposta();
					enterSequence_Code_wrongCh_default();
					react(0);
					
					transitioned_after = 0;
				} else {
					if (((test.getChoiceUser()!=test.getChoiceRight() && param.getChance()>0) && param.getMaxDepth())) {
						exitSequence_Code_controlRisposta();
						enterSequence_Code_changePos_default();
						react(0);
						
						transitioned_after = 0;
					} else {
						if (((test.getChoiceUser()!=test.getChoiceRight() && param.getChance()==0) && param.getMaxDepth())) {
							exitSequence_Code_controlRisposta();
							enterSequence_Code_reset_default();
							react(0);
							
							transitioned_after = 0;
						}
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_rightCh_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (checkR_e) {
				exitSequence_Code_rightCh();
				enterSequence_Code_changeCurrDepth_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_wrongCh_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (checkR_e) {
				exitSequence_Code_wrongCh();
				enterSequence_Code_changeCurrDepth_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_changeCurrDepth_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if ((param.getValue() % 1)<0.5) {
				exitSequence_Code_changeCurrDepth();
				enterSequence_Code_valMin_default();
				react(0);
				
				transitioned_after = 0;
			} else {
				if ((param.getValue() % 1)>=0.5) {
					exitSequence_Code_changeCurrDepth();
					enterSequence_Code_valMax_default();
					react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_controlRisp_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if ((param.getLeftLim() - param.getRightLim())>1) {
				exitSequence_Code_controlRisp();
				enterSequence_Code_changePos_default();
				react(0);
				
				transitioned_after = 0;
			} else {
				if ((param.getLeftLim() - param.getRightLim())<=1) {
					exitSequence_Code_controlRisp();
					enterSequence_Code_fineCert_default();
					react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_changePos_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_Code_changePos();
			enterSequence_Code_choiceUser_default();
			react(0);
			
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code__final__react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_initialize_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (init_e) {
				exitSequence_Code_initialize();
				enterSequence_Code_reset_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_valMin_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_Code_valMin();
			enterSequence_Code_controlRisp_default();
			react(0);
			
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_valMax_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_Code_valMax();
			enterSequence_Code_controlRisp_default();
			react(0);
			
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long code_fineCert_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_Code_fineCert();
			enterSequence_Code_reset_default();
			react(0);
			
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
