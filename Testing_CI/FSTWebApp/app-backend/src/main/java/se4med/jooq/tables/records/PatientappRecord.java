/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import se4med.jooq.tables.Patientapp;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatientappRecord extends UpdatableRecordImpl<PatientappRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = -1443160267;

    /**
     * Setter for <code>se4med.patientapp.emailpatient</code>. email utente per identificare l'utente che usa l'app -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public void setEmailpatient(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>se4med.patientapp.emailpatient</code>. email utente per identificare l'utente che usa l'app -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public String getEmailpatient() {
        return (String) get(0);
    }

    /**
     * Setter for <code>se4med.patientapp.username</code>. username per identificare l'utete che usa l'app -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>se4med.patientapp.username</code>. username per identificare l'utete che usa l'app -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>se4med.patientapp.idapp</code>. identifica l'applicazione per la quale il paziente è abilitato -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione
     */
    public void setIdapp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>se4med.patientapp.idapp</code>. identifica l'applicazione per la quale il paziente è abilitato -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione
     */
    public String getIdapp() {
        return (String) get(2);
    }

    /**
     * Setter for <code>se4med.patientapp.settings</code>.
     */
    public void setSettings(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>se4med.patientapp.settings</code>.
     */
    public String getSettings() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Patientapp.PATIENTAPP.EMAILPATIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Patientapp.PATIENTAPP.USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Patientapp.PATIENTAPP.IDAPP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Patientapp.PATIENTAPP.SETTINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getIdapp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getSettings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getIdapp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getSettings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientappRecord value1(String value) {
        setEmailpatient(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientappRecord value2(String value) {
        setUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientappRecord value3(String value) {
        setIdapp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientappRecord value4(String value) {
        setSettings(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientappRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PatientappRecord
     */
    public PatientappRecord() {
        super(Patientapp.PATIENTAPP);
    }

    /**
     * Create a detached, initialised PatientappRecord
     */
    public PatientappRecord(String emailpatient, String username, String idapp, String settings) {
        super(Patientapp.PATIENTAPP);

        set(0, emailpatient);
        set(1, username);
        set(2, idapp);
        set(3, settings);
    }
}
