/** Generated by YAKINDU Statechart Tools code generator. */


import org.junit.*;
import static org.junit.Assert.*;

/**
 * Unit TestCase for Statechart
 */
@SuppressWarnings("all")
public class FreiburgTest {
	
	private Statechart statemachine;	
	
	
	@Before
	public void freiburgTest_setUp() {
		statemachine = new Statechart();
		
		
	}

	@After
	public void freiburgTest_tearDown() {
		statemachine = null;
		
	}
	
	@Test
	public void testAllCorrect() {
		statemachine.enter();
		assertTrue(statemachine.test().getStartTest() == true);
		assertTrue(statemachine.test().getChoiceRight() == false);
		assertTrue(statemachine.test().getChoiceUser() == true);
		assertTrue(statemachine.test().getFineCert().equals("continua"));
		assertTrue(statemachine.test().getStatus().equals("non_init"));
		assertTrue(statemachine.param().getMaxDepth() == true);
		assertTrue(statemachine.param().getChance() == 1l);
		assertTrue(statemachine.param().getRightLim() == 0l);
		assertTrue(statemachine.param().getLeftLim() == 0l);
		statemachine.raiseInit_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RESET));
		assertTrue(statemachine.test().getChoiceRight() == false);
		assertTrue(statemachine.test().getChoiceUser() == true);
		assertTrue(statemachine.test().getFineCert().equals("continua"));
		assertTrue(statemachine.test().getStatus().equals("non_init"));
		assertTrue(statemachine.param().getMaxDepth() == true);
		assertTrue(statemachine.param().getChance() == 1l);
		assertTrue(statemachine.param().getRightLim() == 0l);
		assertTrue(statemachine.param().getLeftLim() == 0l);
		statemachine.param().setLeftLim(12l);
		statemachine.param().setRightLim(1l);
		statemachine.raiseStart_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_STARTED));
		assertTrue(statemachine.test().getStatus().equals("started"));
		assertTrue(statemachine.param().getCurrDepth() == 12l);
		statemachine.raiseStarted_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		statemachine.test().setChoiceUser(false);
		statemachine.param().setCurrDepth(12l);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.test().getStatus().equals("choosed"));
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RIGHTCH));
		assertTrue(statemachine.param().getLeftLim() == 12l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 6.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 6l);
		statemachine.raiseControlRisp_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		assertTrue(statemachine.param().getChance() == 0l);
		statemachine.test().setChoiceUser(true);
		statemachine.test().setChoiceRight(true);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RIGHTCH));
		assertTrue(statemachine.param().getLeftLim() == 6l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 3.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 3.0);
		statemachine.raiseControlRisp_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		assertTrue(statemachine.param().getChance() == 0l);
		statemachine.test().setChoiceUser(true);
		statemachine.test().setChoiceRight(true);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RIGHTCH));
		assertTrue(statemachine.param().getLeftLim() == 3l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 2.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 2.0);
		statemachine.raiseControlRisp_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		assertTrue(statemachine.param().getChance() == 0l);
		statemachine.test().setChoiceUser(true);
		statemachine.test().setChoiceRight(true);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RIGHTCH));
		assertTrue(statemachine.param().getLeftLim() == 2l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 1.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 1l);
		statemachine.raiseControlRisp_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RESET));
		assertTrue(statemachine.test().getFineCert().equals("fine_cert"));
		assertTrue(statemachine.test().getStartTest() == false);
		statemachine.raiseFine_e();
		statemachine.exit();
	}
	
	@Test
	public void testExit() {
		statemachine.enter();
		assertTrue(statemachine.test().getStartTest() == true);
		assertTrue(statemachine.test().getChoiceRight() == false);
		assertTrue(statemachine.test().getChoiceUser() == true);
		assertTrue(statemachine.test().getFineCert().equals("continua"));
		assertTrue(statemachine.test().getStatus().equals("non_init"));
		assertTrue(statemachine.param().getMaxDepth() == true);
		assertTrue(statemachine.param().getChance() == 1l);
		assertTrue(statemachine.param().getRightLim() == 0l);
		assertTrue(statemachine.param().getLeftLim() == 0l);
		statemachine.raiseInit_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RESET));
		assertTrue(statemachine.test().getChoiceRight() == false);
		assertTrue(statemachine.test().getChoiceUser() == true);
		assertTrue(statemachine.test().getFineCert().equals("continua"));
		assertTrue(statemachine.test().getStatus().equals("non_init"));
		assertTrue(statemachine.param().getMaxDepth() == true);
		assertTrue(statemachine.param().getChance() == 1l);
		assertTrue(statemachine.param().getRightLim() == 0l);
		assertTrue(statemachine.param().getLeftLim() == 0l);
		statemachine.param().setLeftLim(12l);
		statemachine.param().setRightLim(1l);
		statemachine.raiseStart_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_STARTED));
		assertTrue(statemachine.test().getStatus().equals("started"));
		assertTrue(statemachine.param().getCurrDepth() == 12l);
		statemachine.raiseStarted_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		statemachine.test().setChoiceUser(true);
		statemachine.param().setCurrDepth(12l);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.test().getStatus().equals("choosed"));
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		statemachine.test().setChoiceRight(true);
		statemachine.test().setChoiceUser(false);
		assertTrue(statemachine.param().getChance() == 0l);
		assertTrue(statemachine.param().getMaxDepth() == true);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.test().getStatus().equals("choosed"));
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RESET));
		statemachine.raiseFine_e();
		statemachine.exit();
	}
	
	@Test
	public void testFirstCorrectThenWrong() {
		statemachine.enter();
		assertTrue(statemachine.test().getStartTest() == true);
		assertTrue(statemachine.test().getChoiceRight() == false);
		assertTrue(statemachine.test().getChoiceUser() == true);
		assertTrue(statemachine.test().getFineCert().equals("continua"));
		assertTrue(statemachine.test().getStatus().equals("non_init"));
		assertTrue(statemachine.param().getMaxDepth() == true);
		assertTrue(statemachine.param().getChance() == 1l);
		assertTrue(statemachine.param().getRightLim() == 0l);
		assertTrue(statemachine.param().getLeftLim() == 0l);
		statemachine.raiseInit_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RESET));
		assertTrue(statemachine.test().getChoiceRight() == false);
		assertTrue(statemachine.test().getChoiceUser() == true);
		assertTrue(statemachine.test().getFineCert().equals("continua"));
		assertTrue(statemachine.test().getStatus().equals("non_init"));
		assertTrue(statemachine.param().getMaxDepth() == true);
		assertTrue(statemachine.param().getChance() == 1l);
		assertTrue(statemachine.param().getRightLim() == 0l);
		assertTrue(statemachine.param().getLeftLim() == 0l);
		statemachine.param().setLeftLim(12l);
		statemachine.param().setRightLim(1l);
		statemachine.raiseStart_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_STARTED));
		assertTrue(statemachine.test().getStatus().equals("started"));
		assertTrue(statemachine.param().getCurrDepth() == 12l);
		statemachine.raiseStarted_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		statemachine.test().setChoiceUser(false);
		statemachine.param().setCurrDepth(12l);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.test().getStatus().equals("choosed"));
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_RIGHTCH));
		assertTrue(statemachine.param().getLeftLim() == 12l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 6.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 6l);
		statemachine.raiseControlRisp_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		assertTrue(statemachine.param().getChance() == 0l);
		statemachine.test().setChoiceUser(true);
		statemachine.test().setChoiceRight(false);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_WRONGCH));
		assertTrue(statemachine.param().getRightLim() == 6l);
		assertTrue(statemachine.param().getLeftLim() == 12l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 9.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 9.0);
		statemachine.raiseControlRisp_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CHOICEUSER));
		assertTrue(statemachine.param().getChance() == 0l);
		statemachine.test().setChoiceUser(true);
		statemachine.test().setChoiceRight(false);
		statemachine.raiseChoosed_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISPOSTA));
		statemachine.raiseControl_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_WRONGCH));
		assertTrue(statemachine.param().getRightLim() == 9l);
		statemachine.raiseCheckR_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_VALMIN));
		assertTrue(statemachine.param().getValue() == 10.0);
		assertTrue(statemachine.param().getMaxDepth() == false);
		statemachine.raiseChangedCurr_e();
		assertTrue(statemachine.isStateActive(Statechart.State.CODE_CONTROLRISP));
		assertTrue(statemachine.param().getCurrDepth() == 10.0);
		statemachine.raiseControlRisp_e();
		statemachine.exit();
	}
}
