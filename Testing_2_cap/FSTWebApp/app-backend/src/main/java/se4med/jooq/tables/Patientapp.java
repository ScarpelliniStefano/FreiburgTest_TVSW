/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import se4med.jooq.Indexes;
import se4med.jooq.Keys;
import se4med.jooq.Se4med;
import se4med.jooq.tables.records.PatientappRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patientapp extends TableImpl<PatientappRecord> {

    private static final long serialVersionUID = -2018608628;

    /**
     * The reference instance of <code>se4med.patientapp</code>
     */
    public static final Patientapp PATIENTAPP = new Patientapp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientappRecord> getRecordType() {
        return PatientappRecord.class;
    }

    /**
     * The column <code>se4med.patientapp.emailpatient</code>. email utente per identificare l'utente che usa l'app -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public final TableField<PatientappRecord, String> EMAILPATIENT = createField("emailpatient", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "email utente per identificare l'utente che usa l'app -> FK\n\nse l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore");

    /**
     * The column <code>se4med.patientapp.username</code>. username per identificare l'utete che usa l'app -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public final TableField<PatientappRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "username per identificare l'utete che usa l'app -> FK\n\nse lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore");

    /**
     * The column <code>se4med.patientapp.idapp</code>. identifica l'applicazione per la quale il paziente è abilitato -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione
     */
    public final TableField<PatientappRecord, String> IDAPP = createField("idapp", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "identifica l'applicazione per la quale il paziente è abilitato -> FK\n\nse l'id della tabella application viene aggiornato, viene aggiornato anche idapp\nse l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione");

    /**
     * The column <code>se4med.patientapp.settings</code>.
     */
    public final TableField<PatientappRecord, String> SETTINGS = createField("settings", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>se4med.patientapp</code> table reference
     */
    public Patientapp() {
        this(DSL.name("patientapp"), null);
    }

    /**
     * Create an aliased <code>se4med.patientapp</code> table reference
     */
    public Patientapp(String alias) {
        this(DSL.name(alias), PATIENTAPP);
    }

    /**
     * Create an aliased <code>se4med.patientapp</code> table reference
     */
    public Patientapp(Name alias) {
        this(alias, PATIENTAPP);
    }

    private Patientapp(Name alias, Table<PatientappRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patientapp(Name alias, Table<PatientappRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Patientapp(Table<O> child, ForeignKey<O, PatientappRecord> key) {
        super(child, key, PATIENTAPP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Se4med.SE4MED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENTAPP_APPUSER_IDX, Indexes.PATIENTAPP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PatientappRecord> getPrimaryKey() {
        return Keys.KEY_PATIENTAPP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PatientappRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientappRecord>>asList(Keys.KEY_PATIENTAPP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PatientappRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PatientappRecord, ?>>asList(Keys.APPUSER);
    }

    public Application application() {
        return new Application(this, Keys.APPUSER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patientapp as(String alias) {
        return new Patientapp(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patientapp as(Name alias) {
        return new Patientapp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patientapp rename(String name) {
        return new Patientapp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patientapp rename(Name name) {
        return new Patientapp(name, null);
    }
}
