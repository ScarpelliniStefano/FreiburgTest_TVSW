package test;

import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Test;

import session.AbstractPestBase;
import session.AbstractPestBase.Soluzione;
import session.TestSession.Result;

public class testInput {
	//INPUT DOMAIN MODELING: interface-based
	//static int[] leftLim= {-10,0,13};
	//static int[] rightLim= {-5,0,12};
	//static int[] chance= {-1,0, 3};
	//static Soluzione[] sol= {null,Soluzione.GIUSTA,Soluzione.SBAGLIATA,Soluzione.STOP};
	//static Boolean[] maxDepth= {null, true, false};

	
	@SuppressWarnings("null")
	@Test(expected=Exception.class)
	public void TestInterfaceBased2() throws Exception {
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,-5,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,0,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(-10,12,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,-5,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,0,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(0,12,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,-5,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,true,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,0,false,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,-1,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,-1,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,-1,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,-1,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,0,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,0,null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,0,null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,0,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,0,Soluzione.GIUSTA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,0,Soluzione.GIUSTA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,0,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,0,Soluzione.SBAGLIATA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,0,Soluzione.SBAGLIATA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,0,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,0,Soluzione.STOP),Result.FINE_NON_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,0,Soluzione.STOP),Result.FINE_NON_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,3,(Soluzione) null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,3,null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,3,null),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,3,Soluzione.GIUSTA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,3,Soluzione.GIUSTA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,3,Soluzione.GIUSTA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,3,Soluzione.SBAGLIATA),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,3,Soluzione.SBAGLIATA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,3,Soluzione.SBAGLIATA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,(Boolean) null,3,Soluzione.STOP),Result.CONTINUA);
		assertEquals(OtherFunction.PossibleCert(13,12,true,3,Soluzione.STOP),Result.FINE_NON_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(13,12,false,3,Soluzione.STOP),Result.FINE_NON_CERTIFICATA);

	}
	
	
	
	//INPUT DOMAIN MODELING: functionality based
	@Test
	public void testFunctionality() throws Exception{
		
		assertEquals(OtherFunction.PossibleCert(2, 1, false, 1, Soluzione.GIUSTA),Result.FINE_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(6, 1, true, 1, Soluzione.STOP),Result.FINE_NON_CERTIFICATA);
		assertEquals(OtherFunction.PossibleCert(6, 1, false, 0, Soluzione.SBAGLIATA),Result.CONTINUA);
		try {
			assertEquals(OtherFunction.PossibleCert(-2, 1, false, 1, Soluzione.GIUSTA),Result.CONTINUA);
			fail("eccezione non lanciata");
		}catch(Exception e) {
			//lanciata eccezione
		}
	}
	

}
